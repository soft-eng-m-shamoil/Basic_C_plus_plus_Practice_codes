#include <iostream>    //For output/input
#include <ctime>       //For random seed genertaor
#include <stdlib.h>    //for clearing and pausing screen
#include <windows.h>   //For changng colour of output screen
#include <fstream>     //for file handling
#include <conio.h>     //
using namespace std;

void play();             //Containes menu for selecting levels
void GUI_opt();          //Containe option for changing color of output
void controls();         //tool for controls for moving
void Help();             //Contains FAQs
void Report();          //Report an issue
void demo_level2();      //Excutes second demo level
void demo_level();       //Execute demo level 
void level1();           //Execute level 1 
void level2();           //Execute level 2 

int score=0;
char pointer = 'P';
char Ghost = 'G';
char left_movement = 'a';                             // Default Controls for movement of pacman
char left_movement_caps = left_movement - 32;         // Default Controls for movement of pacman
char up_movement = 'w';                               // Default Controls for movement of pacman
char up_movement_caps = up_movement - 32;             // Default Controls for movement of pacman
char right_movement = 'd';                            // Default Controls for movement of pacman
char right_movement_caps = right_movement - 32;       // Default Controls for movement of pacman
char down_movement = 's';                             // Default Controls for movement of pacman
char down_movement_caps = down_movement - 32;         // Default Controls for movement of pacman
bool ghost_output_validation;                         
int lives=3;                            
bool hardcore_switch=false;   
bool *hard = &hardcore_switch;  
int *hard_lives= &score;

int main()
{
    bool menu1_status=true;
    while(menu1_status==true)
    {
        system("CLS"); 
        string menu_option;
        cout << endl;
        cout << "\t\t\t\t\t\t\t***************************************************************" << endl;
        cout << "\t\t\t\t\t\t\t*                  1.Play                                     *" << endl;
        cout << "\t\t\t\t\t\t\t*                  2.GUI Options                              *" << endl;
        cout << "\t\t\t\t\t\t\t*                  3.Controls                                 *" << endl;
        cout << "\t\t\t\t\t\t\t*                  4.Help                                     *" << endl;
        cout << "\t\t\t\t\t\t\t*                  5.Report                                   *" << endl;
        cout << "\t\t\t\t\t\t\t*                  6.Quit                                     *" << endl;
        cout << "\t\t\t\t\t\t\t***************************************************************" << endl;
        cout << endl << endl << "\t\t\t\t\t\t\tChoose an option (By entering Exact Name or number) : "; 
        menu_option=getch();
        if (menu_option == "Play"|| menu_option == "1") 
        {play();}
        else if (menu_option == "GUI Options"|| menu_option == "2")
        {GUI_opt();}
        else if (menu_option == "Controls"|| menu_option == "3")
        {controls();}
        else if (menu_option == "Help"|| menu_option == "4")
        {Help();}
        else if (menu_option == "Report"|| menu_option == "5")
        {Report();}
        else if (menu_option == "Quit"|| menu_option == "6")
        {
            string quit_confirmation;
            cout << "\n\n\t\t\t\t\t\t\tAre you sure you want to quit the game";
            cout << "\n\t\t\t\t\t\t\tEnter 1 for yes and 0 for no: ";
            quit_confirmation=getch();
            if(quit_confirmation=="1")
            {
                menu1_status=false;
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t\tQuiting game .........";
            }
            else if(quit_confirmation=="0")
            {}
            else
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t\tYou have entered Invalid output \n\t\t\t\t\t\t\t";
                system("pause");
            }
            
        }
    }
}

void demo_level()
{                   
    score=0; 
    system("CLS");
                       //0    1    2    3    4    5    6    7    8
    char layout[9][9]={{'#', '#', '#', '#', '#', '#', '#', '#', '#'},//0
                       {'#', '.', '.', '.', '.', '.', '.', '.', '#'},//1
                       {'#', '.', '#', '#', '.', '#', '#', '.', '#'},//2
                       {'#', '.', '#', '.', '.', '.', '#', '.', '#'},//3
                       {'#', '.', '.', '.', '.', '.', '.', '.', '#'},//4
                       {'#', '.', '#', '.', '.', '.', '#', '.', '#'},//5
                       {'#', '.', '#', '#', '.', '#', '#', '.', '#'},//6
                       {'#', '.', '.', '.', '.', '.', '.', '.', '#'},//7
                       {'#', '#', '#', '#', '#', '#', '#', '#', '#'} //8
    };

    char move;
    layout[4][4]=pointer;
    int a =4, b=4;

    while(score<36)
    {
        cout << endl;
        cout << "\n\t\t\t----------------------------------------------------------------------------\n\n";
        for(int counter=0; counter<9; counter++)
        {
            cout << "\t\t\t\t\t\t\t";
            for(int count=0; count<9; count++)
            {
                cout << layout[counter][count] << ' ';
            }
            cout << endl;
        }
        cout << "\n\t\t\t----------------------------------------------------------------------------\n";
            cout << "\t\t\t\t\t\t\tTotal score : " << score << endl;
             cout << "\t\t\t\t\t\t\tEnter move : ";
             move = getch();

        if(move == left_movement|| move == left_movement_caps)
        {
            if(layout[a][b-1]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****\n";
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[a][--b]=='.')
                {score++;}
                layout[a][b]='P';
            }
        }

        else if(move == right_movement|| move == right_movement_caps)
        {
            if(layout[a][b+1]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[a][++b]=='.')
                {score++;}
                layout[a][b]='P';
            }
        }

        else if(move == up_movement|| move == up_movement_caps)
        {
            if(layout[a-1][b]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[--a][b]=='.')
                {score++;}
                layout[a][b]='P';
            }

        }

        else if(move == down_movement|| move == down_movement_caps)
        {
            if(layout[a+1][b]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
               if(layout[++a][b]=='.')
                {score++;}
                layout[a][b]='P';
            }

        }
        else if(move == 'Q'|| move == 'q')
        {
            return;
        }
        else 
        {
            system("CLS");
            cout << "\t\t\t\t\t\tInvalid input, enter [a,b,c or d]";
        }
    }
    cout << endl << endl << endl;
    cout << "\t\t\t\t*******************************************************************************\n";
    cout << "\t\t\t\t***** Congratulations! You have passed the level with a score of " << score << " *****\n";
    cout << "\t\t\t\t*******************************************************************************\n\n";
    cout << endl;
    system("pause");
}

void demo_level2()
{   
    if (*hard == false)
    {
        lives = 3;
    }
    else 
    {
        lives = *hard_lives;
    }
    
    int prev_turn_life=3;
    score=0;
    srand(time(NULL));
    system("CLS"); // to clear output screen

                           //0    1    2    3    4    5    6    7    8    9   10
    char layout[11][11]={{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',},//0
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//1
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//2
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//3
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//4
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//5
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//6
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//7
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//8
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#',},//9
                         {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#',}//10
    };

    char move;
    char pointer = 'P';
    char ghost='G';

    int a =5, b=5 ;
    layout[5][5]=pointer;
    int ghost_x_axis=1 , ghost_y_axis=1;
    layout[ghost_x_axis][ghost_y_axis] = ghost;
    char ghost_location_reserve = '.';           //to prevent loss of points due to ghost movement


    while(score<80 && lives>0)
    {
        cout << "\n\t\t\t----------------------------------------------------------------------------";
        cout << endl << endl;
        for(int counter=0; counter<11; counter++)
        {
            cout << "\t\t\t\t\t\t\t";
            for(int count=0; count<11; count++)
            {
                cout << layout[counter][count] << ' ';
            }
            cout << endl;
        }
        cout << "\n\t\t\t----------------------------------------------------------------------------\n";

        cout << "\t\t\t\t\t\t\tLives Left : " << lives << endl ;
        cout << "\t\t\t\t\t\t\tTotal score: " << score << endl;
        cout << "\t\t\t\t\t\t\tEnter move : ";
        move = getch();

        if(move == left_movement|| move == left_movement_caps)
        {
            if(layout[a][b-1]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a][b-1]=='G')
            {
                system("CLS");
                lives--;
                layout[a][b--]=' ';
            }

            else
            {   

                system("CLS");
                layout[a][b]=' ';
                if(layout[a][--b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }
        }

        else if(move == right_movement|| move == right_movement_caps)
        {
            if(layout[a][b+1]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a][b+1]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b++]=' ';
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[a][++b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }
        }

        else if(move == up_movement|| move == up_movement_caps)
        {
            if(layout[a-1][b]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a-1][b]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b]=' ';
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[--a][b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }

        }

        else if(move == down_movement|| move == down_movement_caps)
        {
            if(layout[a+1][b]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a+1][b]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b]=' ';
            }
            
            else
            {
                system("CLS");
                layout[a][b]=' ';
               if(layout[++a][b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }

        }
        else if(move == 'Q'|| move == 'q')
        {
            return;
        }
        else 
        {
            system("CLS");
            cout << "\n\n\t\t\t\t\t\tInvalid input, enter [a,b,c or d]";
        }

        ghost_output_validation= false;
        while(ghost_output_validation==false) // ghost movement
            {
                int x = rand()%4;
                switch(x)
                {
                    case 0:              //ghost moves upward
                        if(ghost_x_axis - 1 <= 0 || layout[ghost_x_axis-1][ghost_y_axis]=='#'){}
                         else if(layout[ghost_x_axis-1][ghost_y_axis]=='P')
                        {
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
        
                        }
                         else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis-1][ghost_y_axis];
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                        }
                        break;
                    case 1:
                        if( layout[ghost_x_axis+1][ghost_y_axis]=='#'){}
                        else if(layout[ghost_x_axis+1][ghost_y_axis]=='P')
                        {
                            
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis+1][ghost_y_axis];
                            layout[++ghost_x_axis][ghost_y_axis]=ghost;
                        }
                        break;
                    case 2:
                        if( layout[ghost_x_axis][ghost_y_axis+1]=='#'){}
                         else if(layout[ghost_x_axis][ghost_y_axis+1]=='P')
                        {
                        
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis][ghost_y_axis+1];
                            layout[ghost_x_axis][++ghost_y_axis]=ghost;
                        }
                        break;
                    case 3:
                        if( layout[ghost_x_axis][ghost_y_axis-1]=='#'){}
                        else if(layout[ghost_x_axis][ghost_y_axis-1]=='P')
                        {
                           
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else 
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis][ghost_y_axis-1];
                            layout[ghost_x_axis][--ghost_y_axis]=ghost;
                        }
                        break;

                }
            }
        if(prev_turn_life>lives)
        {
            cout << "\t\t\t\t\t\t\tYou have lost a life\n";
        }
        prev_turn_life=lives;

    }
        system("CLS");
        if(lives==0)
        {
            cout << endl << endl << endl;
            cout << "\t\t\t\t*******************************************************************************\n";
            cout << "\t\t\t\t    ***** Game Over ! You have lost all lives,your score is " << score << " *****\n";
            cout << "\t\t\t\t*******************************************************************************\n\n\t\t\t\t";
            system("pause");
        }
        else
        {
            cout << endl << endl << endl;
            cout << "\t\t\t\t*******************************************************************************\n";
            cout << "\t\t\t\t    ***** Congratulations! You have passed the level with a score of " << score << " *****\n";
            cout << "\t\t\t\t*******************************************************************************\n\n\t\t\t\t";
            system("pause");
        }
        *hard_lives = lives;
}

void play()
{
    bool lvlmenu_continue=true;
    while(lvlmenu_continue)
    {
        system("CLS");
        string level_menu_opt;
        cout << endl;
        cout << "\t\t\t\t\t\t\t***************************************************************" << endl;
        cout << "\t\t\t\t\t\t\t*                  1.Demo level 1                             *" << endl;
        cout << "\t\t\t\t\t\t\t*                  2.Demo level 2                             *" << endl;
        cout << "\t\t\t\t\t\t\t*                  3.level 1                                  *" << endl;
        cout << "\t\t\t\t\t\t\t*                  4.level 2                                  *" << endl;
        cout << "\t\t\t\t\t\t\t*                  5.Turn on hardcore switch(lives wont reset)*" << endl;
        cout << "\t\t\t\t\t\t\t*                  6.Turn off hardcore switch                 *" << endl;
        cout << "\t\t\t\t\t\t\t*                  7.Return to main menu                      *" << endl;
        cout << "\t\t\t\t\t\t\t***************************************************************" << endl;
        cout << endl << endl << "\t\t\t\t\t\t\tChoose an option (By entering number) : "; 
        level_menu_opt=getch();
        if (level_menu_opt== "1") 
        {demo_level();}
        else if (level_menu_opt == "2")
        {demo_level2();}
        else if (level_menu_opt == "3")
        {level1();}
        else if (level_menu_opt == "4")
        {level2();}
        else if(level_menu_opt == "5")
        {
            *hard=true;
            cout << "\n\n\t\t\t\t\t\t\tHard core switch turned on lives wont reset on new level\n\t\t\t\t\t\t\t";
            system("pause");
        }
        else if(level_menu_opt == "6")
        {
            *hard= false;
            cout << "\n\n\t\t\t\t\t\t\tHard core switch turned ff lives would reset on new level\n\t\t\t\t\t\t\t";
            system("pause");
        }
        else if (level_menu_opt == "7")
        {lvlmenu_continue=false;}
        else
        {
            system("CLS");
            cout << "\n\n\t\t\t\t\t\t\t   *******Invalid choice*********\n\t\t\t\t\t\t\t";
            system("pause");
        }
    }

}

void level1()
{   
     if (*hard == false)
    {
        lives = 3;
    }
    else 
    {
        lives = *hard_lives;
    }
    int prev_turn_life=3;
    score=0;
    srand(time(NULL));
    system("CLS"); // to clear output screen

                         //0    1    2    3    4    5    6    7    8    9   10    11  12  13  14
    char layout[15][15]={{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#','#','#','#',},//0
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.','.','.','.','#',},//1
                         {'#', '.', '#', '#', '#', '#', '#', '#', '.', '.', '.','.','.','.','#',},//2
                         {'#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.','.','.','.','#',},//3
                         {'#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '.','.','.','#','#',},//4
                         {'#', '.', '#', '.', '#', '#', '#', '#', '.', '.', '.','.','#','#','#',},//5
                         {'#', '.', '#', '#', '#', '.', '.', '.', '.', '.', '.','#','#','#','#',},//6
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.','.','.','.','#',},//7
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.','.','.','.','#',},//8
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.','.','.','.','#',},//9
                         {'#', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.','.','.','.','#',},//10
                         {'#', '.', '#', '.', '.', '.', '.', '#', '#', '.', '.','.','.','.','#',},//11
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.','.','#','.','#',},//12
                         {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.','#','#','.','#',},//13
                         {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#','#','#','#',}//14

    };

    char move;
    char pointer = 'P';
    char ghost='G';

    int a =3, b=4 ;
    layout[3][4]=pointer;
    int ghost_x_axis=8 , ghost_y_axis=8;
    int ghost2_x_axis=1 , ghost2_y_axis=13;
    int ghost3_x_axis=1 , ghost3_y_axis=1;
    layout[ghost_x_axis][ghost_y_axis] = ghost;
    layout[ghost2_x_axis][ghost2_y_axis] = ghost ;
    layout[ghost3_x_axis][ghost3_y_axis] = ghost ;
    char ghost_location_reserve = '.';           //to prevent loss of points due to ghost movement
    char ghost2_location_reserve = '.';          //to prevent loss of points due to ghost movement
    char ghost3_location_reserve = '.';          //to prevent loss of points due to ghost movement

    
    while(score<135 && lives>0)
    {
        cout << "\n\t\t\t----------------------------------------------------------------------------";
        cout << endl << endl;
        for(int counter=0; counter<15; counter++)
        {
            cout << "\t\t\t\t\t\t\t";
            for(int count=0; count<15; count++)
            {
                cout << layout[counter][count] << ' ';
            }
            cout << endl;
        }
        cout << "\n\t\t\t----------------------------------------------------------------------------\n";

        cout << "\t\t\t\t\t\t\tLives Left : " << lives << endl ;
        cout << "\t\t\t\t\t\t\tTotal score: " << score << endl;
        cout << "\t\t\t\t\t\t\tEnter move : ";
        move = getch();

        if(move == left_movement|| move == left_movement_caps)
        {
            if(layout[a][b-1]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a][b-1]=='G')
            {
                system("CLS");
                lives--;
                layout[a][b--]=' ';
            }

            else
            {   

                system("CLS");
                layout[a][b]=' ';
                if(layout[a][--b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }
        }

        else if(move == right_movement|| move == right_movement_caps)
        {
            if(layout[a][b+1]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a][b+1]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b++]=' ';
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[a][++b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }
        }

        else if(move == up_movement|| move == up_movement_caps)
        {
            if(layout[a-1][b]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a-1][b]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b]=' ';
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[--a][b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }

        }

        else if(move == down_movement|| move == down_movement_caps)
        {
            if(layout[a+1][b]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a+1][b]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b]=' ';
            }
            
            else
            {
                system("CLS");
                layout[a][b]=' ';
               if(layout[++a][b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }

        }
        else if(move == 'Q'|| move == 'q')
        {
            return;
        }
        else 
        {
            system("CLS");
            cout << "\n\n\t\t\t\t\t\tInvalid input, enter [a,b,c or d]";
        }

        ghost_output_validation= false;
        while(ghost_output_validation==false) // ghost movement
            {
                int x = rand()%4;
                switch(x)
                {
                    case 0:              //ghost moves upward
                        if(ghost_x_axis - 1 <= 0 || layout[ghost_x_axis-1][ghost_y_axis]=='#'){}
                         else if(layout[ghost_x_axis-1][ghost_y_axis]=='P')
                        {
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
        
                        }
                            else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis-1][ghost_y_axis];
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                        }
                        break;
                    case 1:
                        if( layout[ghost_x_axis+1][ghost_y_axis]=='#'){}
                        else if(layout[ghost_x_axis+1][ghost_y_axis]=='P')
                        {
                            
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis+1][ghost_y_axis];
                            layout[++ghost_x_axis][ghost_y_axis]=ghost;
                        }
                        break;
                    case 2:
                        if( layout[ghost_x_axis][ghost_y_axis+1]=='#'){}
                         else if(layout[ghost_x_axis][ghost_y_axis+1]=='P')
                        {
                        
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis][ghost_y_axis+1];
                            layout[ghost_x_axis][++ghost_y_axis]=ghost;
                        }
                        break;
                    case 3:
                        if( layout[ghost_x_axis][ghost_y_axis-1]=='#'){}
                        else if(layout[ghost_x_axis][ghost_y_axis-1]=='P')
                        {
                           
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else 
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis][ghost_y_axis-1];
                            layout[ghost_x_axis][--ghost_y_axis]=ghost;
                        }
                        break;

                }
            }

           bool  ghost2_output_validation= false;
        while(ghost2_output_validation==false) // ghost movement
            {
                int x = rand()%4;
                switch(x)
                {
                    case 0:              //ghost moves upward
                        if(ghost2_x_axis - 1 <= 0 || layout[ghost2_x_axis-1][ghost2_y_axis]=='#'){}
                         else if(layout[ghost2_x_axis-1][ghost2_y_axis]=='P')
                        {
                            layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                            lives--;
        
                        }
                            else
                        {
                            ghost2_output_validation = true;
                            if(ghost2_location_reserve == '.')
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            }
                            ghost2_location_reserve = layout[ghost2_x_axis-1][ghost2_y_axis];
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                        }
                        break;
                    case 1:
                        if( layout[ghost2_x_axis+1][ghost2_y_axis]=='#'){}
                        else if(layout[ghost2_x_axis+1][ghost2_y_axis]=='P')
                        {
                            
                            layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else
                        {
                            ghost2_output_validation = true;
                            if(ghost2_location_reserve == '.')
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            }
                            ghost2_location_reserve = layout[ghost2_x_axis+1][ghost2_y_axis];
                            layout[++ghost2_x_axis][ghost2_y_axis]=ghost;
                        }
                        break;
                    case 2:
                        if( layout[ghost2_x_axis][ghost2_y_axis+1]=='#'){}
                         else if(layout[ghost2_x_axis][ghost2_y_axis+1]=='P')
                        {
                        
                            layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else
                        {
                            ghost2_output_validation = true;
                            if(ghost2_location_reserve == '.')
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            }
                            ghost2_location_reserve = layout[ghost2_x_axis][ghost2_y_axis+1];
                            layout[ghost2_x_axis][++ghost2_y_axis]=ghost;
                        }
                        break;
                    case 3:
                        if( layout[ghost2_x_axis][ghost2_y_axis-1]=='#'){}
                        else if(layout[ghost2_x_axis][ghost2_y_axis-1]=='P')
                        {
                           
                            layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else 
                        {
                            ghost2_output_validation = true;
                            if(ghost2_location_reserve == '.')
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            }
                            ghost2_location_reserve = layout[ghost2_x_axis][ghost2_y_axis-1];
                            layout[ghost2_x_axis][--ghost2_y_axis]=ghost;
                        }
                        break;

                }
            }

        bool ghost3_output_validation= false;
        while(ghost3_output_validation==false) // ghost movement
            {
                int x = rand()%4;
                switch(x)
                {
                    case 0:              //ghost moves upward
                        if(ghost3_x_axis - 1 <= 0 || layout[ghost3_x_axis-1][ghost3_y_axis]=='#'){}
                         else if(layout[ghost3_x_axis-1][ghost3_y_axis]=='P')
                        {
                            layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                            lives--;
        
                        }
                            else
                        {
                            ghost3_output_validation = true;
                            if(ghost3_location_reserve == '.')
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            }
                            ghost3_location_reserve = layout[ghost3_x_axis-1][ghost3_y_axis];
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                        }
                        break;
                    case 1:
                        if( layout[ghost3_x_axis+1][ghost3_y_axis]=='#'){}
                        else if(layout[ghost3_x_axis+1][ghost3_y_axis]=='P')
                        {
                            
                            layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else
                        {
                            ghost3_output_validation = true;
                            if(ghost3_location_reserve == '.')
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            }
                            ghost3_location_reserve = layout[ghost3_x_axis+1][ghost3_y_axis];
                            layout[++ghost3_x_axis][ghost3_y_axis]=ghost;
                        }
                        break;
                    case 2:
                        if( layout[ghost3_x_axis][ghost3_y_axis+1]=='#'){}
                         else if(layout[ghost3_x_axis][ghost3_y_axis+1]=='P')
                        {
                        
                            layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else
                        {
                            ghost3_output_validation = true;
                            if(ghost3_location_reserve == '.')
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            }
                            ghost3_location_reserve = layout[ghost3_x_axis][ghost3_y_axis+1];
                            layout[ghost3_x_axis][++ghost3_y_axis]=ghost;
                        }
                        break;
                    case 3:
                        if( layout[ghost3_x_axis][ghost3_y_axis-1]=='#'){}
                        else if(layout[ghost3_x_axis][ghost3_y_axis-1]=='P')
                        {
                           
                            layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                            lives--;
        
                            
                        }
                        else 
                        {
                            ghost3_output_validation = true;
                            if(ghost3_location_reserve == '.')
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            }
                            ghost3_location_reserve = layout[ghost3_x_axis][ghost3_y_axis-1];
                            layout[ghost3_x_axis][--ghost3_y_axis]=ghost;
                        }
                        break;

                }
            }
        if(prev_turn_life>lives)
        {
            cout << "\t\t\t\t\t\t\tYou have lost a life\n";
        }
        prev_turn_life=lives;

    }
        system("CLS");
        if(lives==0)
        {
            cout << endl << endl << endl;
            cout << "\t\t\t\t*******************************************************************************\n";
            cout << "\t\t\t\t    ***** Game Over ! You have lost all lives,your score is " << score << " *****\n";
            cout << "\t\t\t\t*******************************************************************************\n\n\t\t\t\t";
            system("pause");
        }
        else
        {
            cout << endl << endl << endl;
            cout << "\t\t\t\t*******************************************************************************\n";
            cout << "\t\t\t\t    ***** Congratulations! You have passed the level with a score of " << score << " *****\n";
            cout << "\t\t\t\t*******************************************************************************\n\n\t\t\t\t";
            system("pause");
        }
    *hard_lives = lives; // to update hardcore lives
}

void level2()
{
    
     if (*hard == false)
    {
        lives = 3;
    }
    else 
    {
        lives = *hard_lives;
    }
    int prev_turn_life=3;
    score=0;
    srand(time(NULL));
    system("CLS"); // to clear output screen

    char layout[30][30] = {
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '#', '#', '.', '#', '#', '#', '#', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '.', '.', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '.', '#', '#'},
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}
};



    char move;
    char pointer = 'P';
    char ghost='G';

    int a =1, b=1 ;
    layout[a][b]=pointer;
    int ghost_x_axis=5 , ghost_y_axis=15;
    int ghost2_x_axis=10 , ghost2_y_axis=5;
    int ghost3_x_axis=20 , ghost3_y_axis=25;
    layout[ghost_x_axis][ghost_y_axis] = ghost;
    layout[ghost2_x_axis][ghost2_y_axis] = ghost ;
    layout[ghost3_x_axis][ghost3_y_axis] = ghost ;
    char ghost_location_reserve = '.';           //to prevent loss of points due to ghost movement
    char ghost2_location_reserve = '.';          //to prevent loss of points due to ghost movement
    char ghost3_location_reserve = '.';          //to prevent loss of points due to ghost movement

    
    while(score<228 && lives>0)
    {
        cout << "\n\t\t\t------------------------------------------------------------------------------------------------------------------------\n\n\n\n";
        for(int counter=0; counter<30; counter++)
        {
            cout << "\t\t\t\t\t\t\t";
            for(int count=0; count<30; count++)
            {
                cout << layout[counter][count] << ' ';
            }
            cout << endl;
        }
        cout << "\t\t\t------------------------------------------------------------------------------------------------------------------------\n";

        cout << "\t\t\t\t\t\t\tLives Left : " << lives << endl ;
        cout << "\t\t\t\t\t\t\tTotal score: " << score << endl;
        cout << "\t\t\t\t\t\t\tEnter move : ";
        move = getch();

        if(move == left_movement|| move == left_movement_caps)
        {
            if(layout[a][b-1]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a][b-1]=='G')
            {
                system("CLS");
                lives--;
                layout[a][b--]=' ';
            }

            else
            {   

                system("CLS");
                layout[a][b]=' ';
                if(layout[a][--b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }
        }

        else if(move == right_movement|| move == right_movement_caps)
        {
            if(layout[a][b+1]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a][b+1]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b++]=' ';
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[a][++b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }
        }

        else if(move == up_movement|| move == up_movement_caps)
        {
            if(layout[a-1][b]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a-1][b]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b]=' ';
            }
            else
            {
                system("CLS");
                layout[a][b]=' ';
                if(layout[--a][b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }

        }

        else if(move == down_movement|| move == down_movement_caps)
        {
            if(layout[a+1][b]=='#')
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t\t\t****Invalid Move can't cross obstacles****"<<endl;
            }
            else if(layout[a+1][b]=='G')
            {
                
                system("CLS");
                lives--;
                layout[a][b]=' ';
            }
            
            else
            {
                system("CLS");
                layout[a][b]=' ';
               if(layout[++a][b]=='.')
                {score++;}
                layout[a][b]=pointer;
            }

        }
        else if(move == 'Q'|| move == 'q')
        {
            return;
        }
        else 
        {
            system("CLS");
            cout << "\n\n\t\t\t\t\t\t\tInvalid input, enter [a,b,c or d]";
        }

        ghost_output_validation= false;
        while(ghost_output_validation==false) // ghost movement
            {
                int x = rand()%4;
                switch(x)
                {
                    case 0:              //ghost moves upward
                        if(ghost_x_axis - 1 <= 0 || layout[ghost_x_axis-1][ghost_y_axis]=='#'){}
                         else if(layout[ghost_x_axis-1][ghost_y_axis]=='P')
                        {
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
                            
                        }
                            else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis-1][ghost_y_axis];
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                        }
                        break;
                    case 1:
                        if( layout[ghost_x_axis+1][ghost_y_axis]=='#'){}
                        else if(layout[ghost_x_axis+1][ghost_y_axis]=='P')
                        {
                            
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
                            
                        }
                        else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis+1][ghost_y_axis];
                            layout[++ghost_x_axis][ghost_y_axis]=ghost;
                        }
                        break;
                    case 2:
                        if( layout[ghost_x_axis][ghost_y_axis+1]=='#'){}
                         else if(layout[ghost_x_axis][ghost_y_axis+1]=='P')
                        {
                        
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
                            
                        }
                        else
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis][ghost_y_axis+1];
                            layout[ghost_x_axis][++ghost_y_axis]=ghost;
                        }
                        break;
                    case 3:
                        if( layout[ghost_x_axis][ghost_y_axis-1]=='#'){}
                        else if(layout[ghost_x_axis][ghost_y_axis-1]=='P')
                        {
                           
                            layout[ghost_x_axis][ghost_y_axis]=' ';
                            layout[--ghost_x_axis][ghost_y_axis]=ghost;
                            lives--;
                            
                        }
                        else 
                        {
                            ghost_output_validation = true;
                            if(ghost_location_reserve == '.')
                            {
                                layout[ghost_x_axis][ghost_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost_x_axis][ghost_y_axis]=' ';
                            }
                            ghost_location_reserve = layout[ghost_x_axis][ghost_y_axis-1];
                            layout[ghost_x_axis][--ghost_y_axis]=ghost;
                        }
                        break;

                }
            }

           bool  ghost2_output_validation= false;
        while(ghost2_output_validation==false) // ghost movement
            {
                int x = rand()%4;
                switch(x)
                {
                    case 0:              //ghost moves upward
                        if(ghost2_x_axis - 1 <= 0 || layout[ghost2_x_axis-1][ghost2_y_axis]=='#'){}
                         else if(layout[ghost2_x_axis-1][ghost2_y_axis]=='P')
                        {
                            layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                            lives--;
                        }
                            else
                        {
                            ghost2_output_validation = true;
                            if(ghost2_location_reserve == '.')
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            }
                            ghost2_location_reserve = layout[ghost2_x_axis-1][ghost2_y_axis];
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                        }
                        break;
                    case 1:
                        if( layout[ghost2_x_axis+1][ghost2_y_axis]=='#'){}
                        else if(layout[ghost2_x_axis+1][ghost2_y_axis]=='P')
                        {
                            
                            layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                            lives--;
                            
                        }
                        else
                        {
                            ghost2_output_validation = true;
                            if(ghost2_location_reserve == '.')
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            }
                            ghost2_location_reserve = layout[ghost2_x_axis+1][ghost2_y_axis];
                            layout[++ghost2_x_axis][ghost2_y_axis]=ghost;
                        }
                        break;
                    case 2:
                        if( layout[ghost2_x_axis][ghost2_y_axis+1]=='#'){}
                         else if(layout[ghost2_x_axis][ghost2_y_axis+1]=='P')
                        {
                        
                            layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                            lives--;
                            
                        }
                        else
                        {
                            ghost2_output_validation = true;
                            if(ghost2_location_reserve == '.')
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            }
                            ghost2_location_reserve = layout[ghost2_x_axis][ghost2_y_axis+1];
                            layout[ghost2_x_axis][++ghost2_y_axis]=ghost;
                        }
                        break;
                    case 3:
                        if( layout[ghost2_x_axis][ghost2_y_axis-1]=='#'){}
                        else if(layout[ghost2_x_axis][ghost2_y_axis-1]=='P')
                        {
                           
                            layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            layout[--ghost2_x_axis][ghost2_y_axis]=ghost;
                            lives--;
                            
                        }
                        else 
                        {
                            ghost2_output_validation = true;
                            if(ghost2_location_reserve == '.')
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost2_x_axis][ghost2_y_axis]=' ';
                            }
                            ghost2_location_reserve = layout[ghost2_x_axis][ghost2_y_axis-1];
                            layout[ghost2_x_axis][--ghost2_y_axis]=ghost;
                        }
                        break;

                }
            }

        bool ghost3_output_validation= false;
        while(ghost3_output_validation==false) // ghost movement
            {
                int x = rand()%4;
                switch(x)
                {
                    case 0:              //ghost moves upward
                        if(ghost3_x_axis - 1 <= 0 || layout[ghost3_x_axis-1][ghost3_y_axis]=='#'){}
                         else if(layout[ghost3_x_axis-1][ghost3_y_axis]=='P')
                        {
                            layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                            lives--;
                        }
                            else
                        {
                            ghost3_output_validation = true;
                            if(ghost3_location_reserve == '.')
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            }
                            ghost3_location_reserve = layout[ghost3_x_axis-1][ghost3_y_axis];
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                        }
                        break;
                    case 1:
                        if( layout[ghost3_x_axis+1][ghost3_y_axis]=='#'){}
                        else if(layout[ghost3_x_axis+1][ghost3_y_axis]=='P')
                        {
                            
                            layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                            lives--;
                            
                        }
                        else
                        {
                            ghost3_output_validation = true;
                            if(ghost3_location_reserve == '.')
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            }
                            ghost3_location_reserve = layout[ghost3_x_axis+1][ghost3_y_axis];
                            layout[++ghost3_x_axis][ghost3_y_axis]=ghost;
                        }
                        break;
                    case 2:
                        if( layout[ghost3_x_axis][ghost3_y_axis+1]=='#'){}
                         else if(layout[ghost3_x_axis][ghost3_y_axis+1]=='P')
                        {
                        
                            layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                            lives--;
                            
                        }
                        else
                        {
                            ghost3_output_validation = true;
                            if(ghost3_location_reserve == '.')
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            }
                            ghost3_location_reserve = layout[ghost3_x_axis][ghost3_y_axis+1];
                            layout[ghost3_x_axis][++ghost3_y_axis]=ghost;
                        }
                        break;
                    case 3:
                        if( layout[ghost3_x_axis][ghost3_y_axis-1]=='#'){}
                        else if(layout[ghost3_x_axis][ghost3_y_axis-1]=='P')
                        {
                           
                            layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            layout[--ghost3_x_axis][ghost3_y_axis]=ghost;
                            lives--;
                            
                        }
                        else 
                        {
                            ghost3_output_validation = true;
                            if(ghost3_location_reserve == '.')
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]='.';
                            }
                            else
                            {
                                layout[ghost3_x_axis][ghost3_y_axis]=' ';
                            }
                            ghost3_location_reserve = layout[ghost3_x_axis][ghost3_y_axis-1];
                            layout[ghost3_x_axis][--ghost3_y_axis]=ghost;
                        }
                        break;

                }
            }
        if(prev_turn_life>lives)
        {
            cout << "\t\t\t\t\t\t\t\tYou have lost a life\n";
        }
        prev_turn_life=lives;
        }
        system("CLS");
        if(lives==0)
        {
            cout << endl << endl << endl;
            cout << "\t\t\t\t*******************************************************************************\n";
            cout << "\t\t\t\t    ***** Game Over ! You have lost all lives,your score is " << score << " *****\n";
            cout << "\t\t\t\t*******************************************************************************\n\n\t\t\t\t";
            system("pause");
        }
        else
        {
            cout << endl << endl << endl;
            cout << "\t\t\t\t*******************************************************************************\n";
            cout << "\t\t\t\t    ***** Congratulations! You have passed the level with a score of " << score << " *****\n";
            cout << "\t\t\t\t*******************************************************************************\n\n\t\t\t\t";
            system("pause");
        }
    *hard_lives = lives;
}

void GUI_opt()
{
    system("CLS");
        bool color_menu_continuation=true;
        while(color_menu_continuation)
        {
            system("CLS");
            string color_menu_opt;
            cout << endl;
            cout << "\t\t\t\t\t\t\t***************************************************************" << endl;
            cout << "\t\t\t\t\t\t\t*      1.Red(background) with white text                      *" << endl;
            cout << "\t\t\t\t\t\t\t*      2.Blue(background) with white text                     *" << endl;
            cout << "\t\t\t\t\t\t\t*      3.Red(text) with black background                      *" << endl;
            cout << "\t\t\t\t\t\t\t*      4.Blue(text) with black background                     *" << endl;
            cout << "\t\t\t\t\t\t\t*      5.Blue(text) with white background                     *" << endl;
            cout << "\t\t\t\t\t\t\t*      6.Yellow(text) with black background                   *" << endl;
            cout << "\t\t\t\t\t\t\t*      7.Set to default                                       *" << endl;
            cout << "\t\t\t\t\t\t\t*      8.Return to main menu                                  *" << endl;
            cout << "\t\t\t\t\t\t\t***************************************************************" << endl;
            cout << endl << endl << "\t\t\t\t\t\t\tChoose an option (By entering number) : "; 
            color_menu_opt=getch();
            if(color_menu_opt=="1")
            {SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), BACKGROUND_RED);}
            else if(color_menu_opt=="2")
            {SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), BACKGROUND_BLUE);}
            else if(color_menu_opt=="3")
            {SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED);}
            else if(color_menu_opt=="4")
            {SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_BLUE);}
            else if(color_menu_opt=="5")
            {SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_BLUE | BACKGROUND_INTENSITY | BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED);}
            else if(color_menu_opt=="6")
            {SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 14);}
            else if(color_menu_opt=="7")
            {SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED);}
            else if(color_menu_opt=="8")
            {return;}
            else
            {
                system("CLS");
                cout << "\n\n\t\t\t\t\t\t\t****Invalid Input****\n\t\t\t\t\t\t\t";
                system("pause");
            }
        }

}

void Help()
{
    system("CLS");
    cout << "\n\t\t\t\t\t\t\t*********************************************************************" << endl;
    cout << "\t\t\t\t\t\t\t*                          Help Menu                                  *" << endl;
    cout << "\t\t\t\t\t\t\t*********************************************************************" << endl;
    cout << "\n\t\t\t\t\t\t\t1. What is the objective of the game?" << endl;
    cout << "\t\t\t\t\t\t\t   Answer: Your objective is to eat all the points." << endl;
    
    cout << "\n\t\t\t\t\t\t\t2. How do I control the Pacman?" << endl;
    cout << "\t\t\t\t\t\t\t   Answer: Use 'a' for left, 'd' for right, 'w' for up, and "<<endl << "\t\t\t\t\t\t\t   's' for down." << endl;

    cout << "\n\t\t\t\t\t\t\t3. What happens if Pacman collides with a ghost?" << endl;
    cout << "\t\t\t\t\t\t\t   Answer: Colliding with a ghost results in the loss of a life." <<endl << "\t\t\t\t\t\t\t   You start with 3 lives." << endl;

    cout << "\n\t\t\t\t\t\t\t4. How are scores calculated?" << endl;
    cout << "\t\t\t\t\t\t\t   Answer: You earn 1 point for eating every dot." << endl;

    cout << "\n\t\t\t\t\t\t\t*********************************************************************" << endl;
    cout << "\n\t\t\t\t\t\t\t";
    system("pause");
}

void controls()
{
    bool controls_menu_continue=true;
    while(controls_menu_continue == true)
    {
        system("CLS");
        string controls_menu_opt;
        cout << endl;
        cout << "\t\t\t\t\t\t\t***************************************************************" << endl;
        cout << "\t\t\t\t\t\t\t*  Change Control for :                                       *" << endl;
        cout << "\t\t\t\t\t\t\t*                  1.left movement                            *" << endl;
        cout << "\t\t\t\t\t\t\t*                  2.right movement                           *" << endl;
        cout << "\t\t\t\t\t\t\t*                  3.up movement                              *" << endl;
        cout << "\t\t\t\t\t\t\t*                  4.Down movement                            *" << endl;
        cout << "\t\t\t\t\t\t\t*                  5.Return to main menu                      *" << endl;
        cout << "\t\t\t\t\t\t\t***************************************************************" << endl;
        cout << endl << endl << "\t\t\t\t\t\t\tChoose an option (By entering number) : "; 
        cin >> controls_menu_opt;
        if (controls_menu_opt== "1") 
        {
            cout << "\t\t\t\t\t\t\tSet Control for Left movement to : ";
            cin >> left_movement;
        }
        else if (controls_menu_opt == "2")
        {
            cout << "\t\t\t\t\t\t\tSet Control for Right movement to : ";
            cin >> right_movement;
        }
        else if (controls_menu_opt== "3")
        {
            cout << "\t\t\t\t\t\t\tSet Control for Up movement to : ";
            cin >> up_movement;
        }
        else if (controls_menu_opt== "4")
        {
            cout << "\t\t\t\t\t\t\tSet Control for Down movement to : ";
            cin >> down_movement;
        }
        else if (controls_menu_opt== "5")
        {controls_menu_continue=false;}
        else
        {
            system("CLS");
            cout << "\n\n\t\t\t\t\t\t\t   *******Invalid choice*********\n\t\t\t\t\t\t\t";
            system("pause");
        }
    }
}

void Report()
{
    const std::string fileName = "ReportsData.txt";
    std::fstream file;

    file.open(fileName, std::ios::in | std::ios::out | std::ios::app);

    if (!file.is_open()) {     //to check and create file
        std::ofstream createFile(fileName);
        std::cout << "File \"" << fileName << "\" created." << std::endl;
        file.open(fileName, std::ios::in | std::ios::out | std::ios::app);
        file << "******************************"<< std::endl;
        file << "*      Issues Reported       *"<< std::endl;
        file << "******************************"<< std::endl;
    }

    if (file.is_open()) {
        std::string option;
        std::cout << "\n\t\t\t\t\t\t\tDo you want to report an issue? (yes/no): ";
        std::cin >> option;

        if (option == "yes" || option == "YES" ||option == "Yes") {
            std::string issue, name;
            std::cin.ignore();  // Clear input buffer
            std::cout << "\t\t\t\t\t\t\tEnter the issue: ";
            std::getline(std::cin, issue);
            std::cout << "\t\t\t\t\t\t\tEnter your name: ";
            std::getline(std::cin, name);

            file << "Issue: " << issue << ", Reported by: " << name << std::endl;
            std::cout << "Issue reported successfully.          ";
            system("pause");
        } else if (option == "no" || option == "NO" ||option == "No") {
            std::cout << "\t\t\t\t\t\t\tNo issue reported." << std::endl;
        } else {
            std::cout << "\t\t\t\t\t\t\tInvalid option. Please enter 'yes' or 'no'." << std::endl;
        }

        file.close();
    } else {
        std::cerr << "\t\t\t\t\t\t\tError: Unable to open the file." << std::endl;
    }
}
